#include "RSUsersLoader.h"#include "RecommenderSystemLoader.h"#include "fstream"#include "string"#include <utility>#include <stdexcept>#include <sstream>#define INITIAL_LENGTH 1#define MIN_NUM 1#define MAX_NUM 10#define INVALID_FILE "file is invalid"#define INVALID_RATE "rate is invalid"std::vector<RSUser>RSUsersLoader::create_users_from_file (const std::string &users_file_path,                                       RecommenderSystemPtr rs)noexcept (false){  std::ifstream users_and_ranks (users_file_path, std::ios::in);  if (!users_and_ranks.is_open ())  {    throw std::invalid_argument (INVALID_FILE);  }  std::shared_ptr<RecommenderSystem> rs_ptr = std::move (rs);  std::vector<RSUser> users;  std::string line;  std::getline (users_and_ranks, line);  std::vector<sp_movie> movies = buffer_first_line (line, rs_ptr);  while (std::getline (users_and_ranks, line))  {    RSUser new_user = buffer_user (line, movies, rs_ptr, users_and_ranks);    users.push_back (new_user);  }  users_and_ranks.close ();  return users;}std::vector<sp_movie>RSUsersLoader::buffer_first_line (const std::string &line,                                  const std::shared_ptr<RecommenderSystem>                                  &rs_ptr){  std::vector<sp_movie> movies;  std::istringstream iss (line);  std::string movie_name;  std::string year;  while (iss.good ())  {    std::getline (iss, movie_name, '-');    std::getline (iss, year, ' ');    sp_movie movie = rs_ptr->get_movie (movie_name, std::stoi (year));    movies.push_back (movie);  }  return movies;}RSUserRSUsersLoader::buffer_user (std::string line, std::vector<sp_movie>vec_of_movies, const std::shared_ptr<RecommenderSystem> &shared_ptr,                            std::ifstream &users_and_ranks){  std::istringstream iss (line);  std::string name;  std::getline (iss, name, ' ');  std::vector<double> rates_for_each_user;  while (std::getline (iss, line, ' '))  {    double rate_d;    std::string rate_s;    if (line == "NA")    {      rate_d = 0;    }    else    {      rate_d = std::stod (line);      if (rate_d < MIN_NUM || rate_d > MAX_NUM)      {        users_and_ranks.close ();        throw std::invalid_argument (INVALID_RATE);      }    }    rates_for_each_user.push_back (rate_d);  }  std::unordered_map<sp_movie, double, hash_func, equal_func>      ranks_for_each_user (INITIAL_LENGTH, sp_movie_hash, sp_movie_equal);  for (size_t i = 0; i < vec_of_movies.size (); i++)  {    ranks_for_each_user.insert (std::make_pair<> (vec_of_movies[i],                                                  rates_for_each_user[i]));  }  RSUser user (name, ranks_for_each_user, shared_ptr);  return user;}